---
// WorkExperience.astro
const {work} = Astro.props

// Function to parse markdown-style bold text
import { remark } from 'remark';
import html from 'remark-html';

interface linkOBJ {
  type: string,
  href: string | URL | null | undefined
}
---

<div class="flex min-h-0 min-w-0 w-full flex-col gap-y-2 px-2 sm:px-0">
  <h2 class="text-2xl sm:text-3xl font-bold text-gray-900 px-2 sm:px-0">Work Experience</h2>
  
  <div class="space-y-0 sm:space-y-3 divide-y sm:divide-dashed divide-gray-200 sm:divide-y-0">
    {work.map((job: any, index: number) => (
      <div class="group overflow-hidden bg-white">
        <!-- Hidden checkbox for state management -->
        <input type="checkbox" id={`accordion-${index}`} class="peer sr-only" />
        
        <!-- Accordion Header -->
        <label 
          for={`accordion-${index}`}
          class="block w-full px-3 sm:px-4 py-3 sm:py-4 cursor-pointer bg-white hover:bg-gray-50 active:bg-gray-100 transition-colors duration-200"
        >
          <div class="flex items-start sm:items-center gap-3 sm:gap-2.5">
            <!-- Company Logo -->
            <div class="w-10 h-10 sm:w-10 sm:h-10 border border-gray-200 rounded-full flex items-center justify-center overflow-hidden shrink-0 mt-0.5 sm:mt-0">
              <img 
                src={job.logoUrl} 
                alt={`${job.company} logo`}
                class="w-full h-full rounded-full object-contain"
                loading="lazy"
              />
            </div>
            
            <!-- Job Info Container -->
            <div class="flex-1 min-w-0">
              <!-- Desktop Layout -->
              <div class="hidden sm:block sm:w-full">
                <div class="flex items-center justify-between mb-1">
                  <h3 class="text-sm font-semibold text-gray-900 truncate flex-1 min-w-0 pr-3">{job.title}</h3>
                  <div class="flex items-center space-x-3">
                    <span class="text-sm text-gray-500 font-medium whitespace-nowrap">{job.start} - {job.end}</span>
                    <svg 
                      class="w-5 h-5 text-gray-400 transform transition-transform duration-300 ease-out peer-checked:rotate-180 shrink-0"
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
                <p class="text-sm text-gray-600 truncate">{job.company} â€¢ {job.location}</p>
              </div>
              
              <!-- Mobile Layout -->
              <div class="sm:hidden">
                <div class="flex items-start justify-between mb-1">
                  <div class="flex-1 min-w-0 pl-1">
                    <div class="flex items-center justify-between mb-1">
                      <h3 class="text-sm font-semibold text-gray-900 leading-tight flex-1 min-w-0 pr-2">{job.title}</h3>
                      <span class="text-xs text-gray-500 font-medium whitespace-nowrap">{job.start} - {job.end}</span>
                    </div>
                    <p class="text-sm text-gray-600 leading-tight mb-1">{job.company}</p>
                    <p class="text-xs text-gray-500">{job.location}</p>
                  </div>
                  <svg 
                    class="w-5 h-5 text-gray-400 transform transition-transform duration-300 ease-out peer-checked:rotate-180 shrink-0 mt-0.5"
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </label>

        <!-- Accordion Content -->
        <div class="max-h-0 overflow-hidden transition-all duration-500 ease-in-out peer-checked:max-h-screen peer-checked:pb-3 sm:peer-checked:pb-4">
          <div class="px-3 sm:px-6 pt-0 pb-3 sm:pb-4 bg-gradient-to-r from-gray-50 to-blue-50/30 border-t border-gray-100">
            <div class="space-y-3 sm:space-y-4 pt-3 sm:pt-4">
              <!-- Description -->
              <div class="text-sm sm:text-base text-gray-700 leading-relaxed">
                {job.description.map(async(desc: any) => {
                  const processedDescription = await remark()
                    .use(html)
                    .process(desc);
                  return <div set:html={processedDescription} class="mb-2 sm:mb-3 [&>p]:mb-2 [&>ul]:mb-2 [&>ol]:mb-2 [&>li]:mb-1" />
                })}
              </div>
              
              <!-- Links -->
              {job.links && job.links.length > 0 && (
                <div class="pt-2 sm:pt-3 border-t border-gray-200">
                  <h4 class="text-sm font-semibold text-gray-800 mb-2 sm:mb-3">Related Links:</h4>
                  <div class="flex flex-wrap gap-2">
                    {job.links.map((link: linkOBJ) => (
                      <a 
                        href={link.href}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center px-3 py-2 text-xs sm:text-sm font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-full hover:bg-blue-100 hover:border-blue-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 transition-all duration-200 ease-out active:scale-95 touch-manipulation"
                      >
                        <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                        </svg>
                        <span class="truncate max-w-[120px] sm:max-w-none">{link.type}</span>
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  /* Only keep the animation that Tailwind can't handle */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Apply animation to content when accordion is opened */
  .peer:checked ~ div > div {
    animation: fadeInUp 0.4s ease-out;
  }
  
  /* Fix for the icon rotation - needs to be in the label context */
  .peer:checked + label svg {
    transform: rotate(180deg);
  }
  
  /* Ensure smooth touch interactions on mobile */
  @media (max-width: 640px) {
    .group {
      -webkit-tap-highlight-color: transparent;
    }
    
    label {
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      user-select: none;
    }
  }
  
  /* Enhanced content styling for mobile */
  @media (max-width: 640px) {
    .peer:checked ~ div [set\\:html] {
      line-height: 1.6;
    }
    
    .peer:checked ~ div [set\\:html] p {
      margin-bottom: 0.75rem;
    }
    
    .peer:checked ~ div [set\\:html] ul,
    .peer:checked ~ div [set\\:html] ol {
      margin-left: 1rem;
      margin-bottom: 0.75rem;
    }
    
    .peer:checked ~ div [set\\:html] li {
      margin-bottom: 0.25rem;
    }
  }
</style>