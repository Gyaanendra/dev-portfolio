---
// WorkExperience.astro
const {work} = Astro.props

// Function to parse markdown-style bold text
import { remark } from 'remark';
import html from 'remark-html';

interface linkOBJ {
  type: string,
  href: string | URL | null | undefined
}
---

<div class="flex min-h-0 min-w-0 w-full flex-col gap-y-1">
  <h2 class="text-3xl font-bold text-gray-900">Work Experience</h2>
  
  <div class="space-y-3 divide-dashed divide-gray-200">
    {work.map((job: any, index: number) => (
      <div class="group overflow-hidden  bg-white">
        <!-- Hidden checkbox for state management -->
        <input type="checkbox" id={`accordion-${index}`} class="peer sr-only" />
        
        <!-- Accordion Header -->
        <label 
          for={`accordion-${index}`}
          class="block w-full px-4 py-4 cursor-pointer bg-white"
        >
          <div class="flex items-center gap-2">
            <div class="flex items-centr space-x-4 flex-1 min-w-0 ">
              <div class="w-10 h-10 border border-gray-200 rounded-full flex items-center justify-center overflow-hidden shrink-0">
                <img 
                  src={job.logoUrl} 
                  alt={`${job.company} logo`}
                  class="w-full h-full rounded-full  object-contain"
                  loading="lazy"
                />
              </div>
               <div class="flex">

              <div class="flex-1 min-w-0">
                <h3 class="text-xs sm:text-sm font-semibold text-gray-900 truncate">{job.title}</h3>
                <p class="text-sm text-gray-600 truncate">{job.company} â€¢ {job.location}</p>
              </div>
               <svg 
                class="w-5 h-5 mt-1 ml-1 text-gray-400 transform transition-transform duration-300 ease-out peer-checked:rotate-180"
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
               </div>
            </div>

            <div class="flex items-center space-x-3 ">
              <span class="text-sm text-gray-500 font-medium">{job.start} - {job.end}</span>
            </div>
          </div>
          {/* <!-- Mobile date display -->
          <div class="sm:hidden mt-2 text-left">
            <span class="text-sm text-gray-500 font-medium">{job.start} - {job.end}</span>
          </div> */}
        </label>

        <!-- Accordion Content -->
        <div class="max-h-0 overflow-hidden transition-all duration-500 ease-in-out peer-checked:max-h-screen peer-checked:pb-4">
          <div class="px-6 pt-0 pb-4 bg-gradient-to-r from-gray-50 to-blue-50/30 border-t border-gray-100">
            <div class="space-y-4 pt-4">
              <!-- Description -->
              <div class=" text-gray-700">
                {job.description.map(async(desc: any) => {
                  const processedDescription = await remark()
                    .use(html)
                    .process(desc);
                  return <div set:html={processedDescription} class="mb-3" />
                })}
              </div>
              
              <!-- Links -->
              {job.links && job.links.length > 0 && (
                <div class="pt-3 border-t border-gray-200">
                  <h4 class="text-sm font-semibold text-gray-800 mb-3">Related Links:</h4>
                  <div class="flex flex-wrap gap-2">
                    {job.links.map((link: linkOBJ) => (
                      <a 
                        href={link.href}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-full hover:bg-blue-100 hover:border-blue-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 transition-all duration-200 ease-out"
                      >
                        <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                        </svg>
                        {link.type}
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  /* Only keep the animation that Tailwind can't handle */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Apply animation to content when accordion is opened */
  .peer:checked ~ div > div {
    animation: fadeInUp 0.4s ease-out;
  }
  
  /* Fix for the icon rotation - needs to be in the label context */
  .peer:checked + label svg {
    transform: rotate(180deg);
  }
</style>